#ifndef RS485_REGION_HANDLER_ENUM_H
#define RS485_REGION_HANDLER_ENUM_H

#define SYSINFORM_REG_START 0x0000
#define SYSINFORM_REG_END 0x000F
#define SYSINFORM_TOTAL_REG_NUM (SYSINFORM_REG_END - SYSINFORM_REG_START + 1)

#define SYSPARASET_REG_START 0x0010
#define SYSPARASET_REG_END 0x003F
#define SYSPARASET_TOTAL_REG_NUM (SYSPARASET_REG_END - SYSPARASET_REG_START + 1)

#define SYSPARADISP_REG_START 0x0040
#define SYSPARADISP_REG_END 0x004F
#define SYSPARADISP_TOTAL_REG_NUM (SYSPARADISP_REG_END - SYSPARADISP_REG_START + 1)

#define DATAREAD_REG_START 0x0050
#define DATAREAD_REG_END 0x006F
#define DATAREAD_TOTAL_REG_NUM (DATAREAD_REG_END - DATAREAD_REG_START + 1)

#define DEVCTRL_REG_START 0x0080
#define DEVCTRL_REG_END 0x008F
#define DEVCTRL_TOTAL_REG_NUM (DEVCTRL_REG_END - DEVCTRL_REG_START + 1)

#define SENS_CARD_DATAREAD_REG_START 0x0070
#define SENS_CARD_REG_END 0x007F
#define SENS_CARD_TOTAL_REG_NUM (SENS_CARD_REG_END - SENS_CARD_DATAREAD_REG_START + 1)

#define SENS_CARD_DEVCTRL_REG_START 0x0090
#define SENS_CARD_DEVCTRL_REG_END 0x009F
#define SENS_CARD_DEVCTRL_TOTAL_REG_NUM (SENS_CARD_DEVCTRL_REG_END - SENS_CARD_DEVCTRL_REG_START + 1)

#define FANS_CARD_REG_START 0x00A0
#define FANS_CARD_REG_END 0x00BF
#define FANS_CARD_TOTAL_REG_NUM (FANS_CARD_REG_END - FANS_CARD_REG_START + 1)

#define FANS_CARD_WRITE_REG_START 0x00B0
#define FANS_CARD_WRITE_REG_END 0x00BF
#define FANS_CARD_WRITE_NUM (FANS_CARD_WRITE_REG_END - FANS_CARD_WRITE_REG_START + 1)

#define FANS_CARD_SYS_SET_REG_START 0x00C0
#define FANS_CARD_SYS_SET_REG_END 0x00CF
#define FANS_CARD_SYS_SET_NUM (FANS_CARD_SYS_SET_REG_END - FANS_CARD_SYS_SET_REG_START + 1)

#define FANS_CARD_SYS_DISP_REG_START 0x00D0
#define FANS_CARD_SYS_DISP_REG_END 0x00DF
#define FANS_CARD_SYS_DISP_NUM (FANS_CARD_SYS_DISP_REG_END - FANS_CARD_SYS_DISP_REG_START + 1)

#define CDU_RS485_ADDR 0x21
#define SENS_RS485_ADDR 0x22
#define FAN_RS485_ADDR 0x23

typedef enum {
  POWER_ON_SETTING = 1,
} SysInformCase_t;

typedef enum {
  AUTOMATIC_MODE = SYSPARASET_REG_START,
  TEMPERATURE_SET_POINT,
  FLOW_SET_POINT,
  DIFFERENTIAL_PRESSURE_SET_POINT,
  MIN_PUMP_SPEED,
  PUMP_STOP_DELAY,
  PRESSURE_ALARM_MODE,
  PRESSURE_ALARM_DELAY,
  OUTLET_FLUID_LOW_PRESSURE_ALARM,
  OUTLET_FLUID_HIGH_PRESSURE_ALARM,
  INLET_FLUID_LOW_PRESSURE_ALARM,
  INLET_FLUID_HIGH_PRESSURE_ALARM,
  SIDECAR_RETURN_FLUID_LOW_PRESSURE_ALARM,
  SIDECAR_RETURN_FLUID_HIGH_PRESSURE_ALARM,
  FLOW_ALARM_MODE,
  LOW_FLOW_ALARM,
  LOW_FLOW_DELAY_PERIOD,
  OVER_FLOW_ALARM,
  OVER_FLOW_DELAY_PERIOD,
  TEMP_ALARM_MODE,
  TEMP_ALARM_DELAY_PERIOD,
  LOW_OUTLET_FLUID_TEMP_ALARM,
  HIGH_OUTLET_FLUID_TEMP_ALARM,
  HIGH_AMBIENT_TEMP_ALARM,
  LEAK_DETECTION_MODE,
  CDU_DETECTING_DELAY_PERIOD,
  SERVER_DETECTING_DELAY_PERIOD,
  SIDECAR_DETECTING_DELAY_PERIOD,
  CDU_DEW_POINT_CALIBRATION,
  CDU_TEMP_COMPENSATION,
  CDU_FLUID_INLET_TEMP_CALIBRATION,
  CDU_FLUID_OUTLET_TEMP_CALIBRATION,
  PT100_ABNORMAL_TEMPERATURE_LOW,
  PT100_ABNORMAL_TEMPERATURE_HIGH,
  NTC_ABNORMAL_TEMPERATURE_LOW,
  NTC_ABNORMAL_TEMPERATURE_HIGH,
  ABNORMAL_PRESSURE_LOW,
  ABNORMAL_PRESSURE_HIGH,
} SysParaSetCase_t;

typedef enum {
  SYSTEM_ALARM_STATUS = SYSPARADISP_REG_START,
  SYSTEM_UPTIME_HIGH,
  SYSTEM_UPTIME_LOW,
  PUMP1_RUNTIME_HIGH,
  PUMP1_RUNTIME_LOW,
  PUMP2_RUNTIME_HIGH,
  PUMP2_RUNTIME_LOW,
  PERIPHERAL_STATUS,
} SysParaDispCase_t;

typedef enum {
  PT100_1_TEMPERATURE = DATAREAD_REG_START,
  PT100_2_TEMPERATURE,
  PT100_3_TEMPERATURE,
  PT100_4_TEMPERATURE,
  NTC_1_TEMPERATURE,
  NTC_2_TEMPERATURE,
  NTC_3_TEMPERATURE,
  NTC_4_TEMPERATURE,
  PRESSURE_1_VALUE,
  PRESSURE_2_VALUE,
  PRESSURE_3_VALUE,
  PRESSURE_4_VALUE,
  FLOW_VALUE,
  PUMP_1_FEEDBACK,
  PUMP_2_FEEDBACK,
  LEAK_SENSOR,
  POWER_1_STATUS,
  POWER_1_VOLTAGE_INPUT,
  POWER_1_CURRENT_INPUT,
  POWER_1_TEMPERATURE,
  POWER_2_STATUS,
  POWER_2_VOLTAGE_INPUT,
  POWER_2_CURRENT_INPUT,
  POWER_2_TEMPERATURE,
  TEMPERATURE,
  HUMIDITY,
  DEW_TEMPERATURE,
  FAN_1_FEEDBACK_TEMP,
  DEVICE_CONNECTED,
  RESERVED_1,
  RESERVED_2,
  RESERVED_3,
} DataReadCase_t;

typedef enum {
  SIDECAR_PT100_1_TEMPERATURE = SENS_CARD_DATAREAD_REG_START,
  SIDECAR_PT100_2_TEMPERATURE,
  SIDECAR_PT100_3_TEMPERATURE,
  SIDECAR_PT100_4_TEMPERATURE,
  SIDECAR_PRESSURE_1_VALUE,
  SIDECAR_PRESSURE_2_VALUE,
  SIDECAR_LEAK_SENSOR,
  SIDECAR_TEMPERATURE,
  SIDECAR_HUMIDITY,
  SIDECAR_RESERVED_1,
  SIDECAR_RESERVED_2,
  SIDECAR_RESERVED_3,
  SIDECAR_RESERVED_4,
  SIDECAR_RESERVED_5,
  SIDECAR_RESERVED_6,
  SIDECAR_RESERVED_7,
} SideCarSensReadCase_t;

typedef enum {
  PUMP_1_RPM = DEVCTRL_REG_START,
  PUMP_2_RPM,
  PROPORTIONAL_VALVE_1_DUTY,
  PROPORTIONAL_VALVE_2_DUTY,
  RESERVED_CTRL_1,
  RESERVED_CTRL_2,
  RESERVED_CTRL_3,
  RESERVED_CTRL_4,
  RESERVED_CTRL_5,
  RESERVED_CTRL_6,
  RESERVED_CTRL_7,
  RESERVED_CTRL_8,
  RESERVED_CTRL_9,
  RESERVED_CTRL_10,
  RESERVED_CTRL_11,
  RESERVED_CTRL_12,
} DevCtrlCase_t;

typedef enum {
  SIDECAR_PRESSURE_PUMP = SENS_CARD_DEVCTRL_REG_START,
  SIDECAR_RESERVED_CTRL_1,
  SIDECAR_RESERVED_CTRL_2,
  SIDECAR_RESERVED_CTRL_3,
  SIDECAR_RESERVED_CTRL_4,
  SIDECAR_RESERVED_CTRL_5,
  SIDECAR_RESERVED_CTRL_6,
  SIDECAR_RESERVED_CTRL_7,
  SIDECAR_RESERVED_CTRL_8,
  SIDECAR_RESERVED_CTRL_9,
  SIDECAR_RESERVED_CTRL_10,
  SIDECAR_RESERVED_CTRL_11,
  SIDECAR_RESERVED_CTRL_12,
  SIDECAR_RESERVED_CTRL_13,
  SIDECAR_RESERVED_CTRL_14,
  SIDECAR_RESERVED_CTRL_15,
} SideCarDevCtrlCase_t;

typedef enum {
  FAN_1_FEEDBACK = FANS_CARD_REG_START,
  FAN_2_FEEDBACK,
  FAN_3_FEEDBACK,
  FAN_4_FEEDBACK,
  FAN_5_FEEDBACK,
  FAN_6_FEEDBACK,
  FAN_7_FEEDBACK,
  FAN_8_FEEDBACK,
  FAN_9_FEEDBACK,
  FAN_10_FEEDBACK,
  FAN_11_FEEDBACK,
  FAN_12_FEEDBACK,
  FAN_13_FEEDBACK,
  FAN_14_FEEDBACK,
  FAN_15_FEEDBACK,
  FAN_16_FEEDBACK,
  FAN_1_DUTY,
  FAN_2_DUTY,
  FAN_3_DUTY,
  FAN_4_DUTY,
  FAN_5_DUTY,
  FAN_6_DUTY,
  FAN_7_DUTY,
  FAN_8_DUTY,
  FAN_9_DUTY,
  FAN_10_DUTY,
  FAN_11_DUTY,
  FAN_12_DUTY,
  FAN_13_DUTY,
  FAN_14_DUTY,
  FAN_15_DUTY,
  FAN_16_DUTY,
} FansCardCase_t;

typedef enum {
  FAN_ALARM_MODE = FANS_CARD_SYS_SET_REG_START,
  FAN_ALARM_DELAY,
  FAN_LOW_SPEED_WARNING_THRESHOLD,
  FAN_FG_DIFFERENCE_WARNING_THRESHOLD,
  FAN_BOARD_AUTO_CONTROL,
  AUTO_CONTROL_TARGET_SPEED,
  FAN_INSTALLATION_STATUS,
} FanCardSysSetCase_t;

typedef enum {
  FAN_BOARD_FAULT_STATUS,
  FAN_STATUS_ON_FAN_BOARD_BITFIELD_0_15,
} FanCardSysDispCase_t;

#endif  // !RS485_REGION_HANDLER_ENUM_H