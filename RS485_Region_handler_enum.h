#ifndef RS485_REGION_HANDLER_ENUM_H
#define RS485_REGION_HANDLER_ENUM_H

#define SYS_BASIC_INFORM_REG_START 0x0000
#define SYS_BASIC_INFORM_REG_END 0x000F
#define SYS_INFORM_REG_NUM (SYS_BASIC_INFORM_REG_END - SYS_BASIC_INFORM_REG_START + 1)

#define MAIN_SYS_PARA_SET_REG_START 0x0010
#define MAIN_SYS_PARA_SET_REG_END 0x004F
#define MAIN_SYS_PARA_SET_REG_NUM (MAIN_SYS_PARA_SET_REG_END - MAIN_SYS_PARA_SET_REG_START + 1)

#define MAIN_SYS_ALARM_SET_REG_START 0x0050
#define MAIN_SYS_ALARM_SET_REG_END 0x006F
#define MAIN_SYS_ALARM_SET_REG_NUM (MAIN_SYS_ALARM_SET_REG_END - MAIN_SYS_ALARM_SET_REG_START + 1)

#define MAIN_SYS_STAT_DISP_REG_START 0x0070
#define MAIN_SYS_STAT_DISP_REG_END 0x008F
#define MAIN_SYS_STAT_DISP_REG_NUM (MAIN_SYS_STAT_DISP_REG_END - MAIN_SYS_STAT_DISP_REG_START + 1)

#define MAIN_DATA_READ_REG_START 0x0090
#define MAIN_DATA_READ_REG_END 0x00AF
#define MAIN_DATA_READ_REG_NUM (MAIN_DATA_READ_REG_END - MAIN_DATA_READ_REG_START + 1)

#define MAIN_DATA_CALIB_REG_START 0x00B0
#define MAIN_DATA_CALIB_REG_END 0x00D7
#define MAIN_DATA_CALIB_REG_NUM (MAIN_DATA_CALIB_REG_END - MAIN_DATA_CALIB_REG_START + 1)

#define CDU_POWER_READ_REG_START 0x00D8
#define CDU_POWER_READ_REG_END 0x00DF
#define CDU_POWER_READ_REG_NUM (CDU_POWER_READ_REG_END - CDU_POWER_READ_REG_START + 1)

#define MAIN_DEV_CTRL_REG_START 0x00E0
#define MAIN_DEV_CTRL_REG_END 0x00EF
#define MAIN_DEV_CTRL_REG_NUM (MAIN_DEV_CTRL_REG_END - MAIN_DEV_CTRL_REG_START + 1)

#define SENS_DATA_READ_REG_START 0x00F0
#define SENS_DATA_READ_REG_END 0x00FF
#define SENS_DATA_READ_REG_NUM (SENS_DATA_READ_REG_END - SENS_DATA_READ_REG_START + 1)

#define SENS_DATA_CALIB_REG_START 0x0100
#define SENS_DATA_CALIB_REG_END 0x010F
#define SENS_DATA_CALIB_REG_NUM (SENS_DATA_CALIB_REG_END - SENS_DATA_CALIB_REG_START + 1)

#define SENS_DEV_CTRL_REG_START 0x0110
#define SENS_DEV_CTRL_REG_END 0x011F
#define SENS_DEV_CTRL_REG_NUM (SENS_DEV_CTRL_REG_END - SENS_DEV_CTRL_REG_START + 1)

#define SIDECAR_POWER_READ_REG_START 0x0120
#define SIDECAR_POWER_READ_REG_END 0x012F
#define SIDECAR_POWER_READ_REG_NUM (SIDECAR_POWER_READ_REG_END - SIDECAR_POWER_READ_REG_START + 1)

#define FANS_SYS_SET_REG_START 0x130
#define FANS_SYS_SET_REG_END 0x013F
#define FANS_SYS_SET_TOTAL_NUM (FANS_SYS_SET_REG_END - FANS_SYS_SET_REG_START + 1)

#define FANS_SYS_DISP_REG_START 0x0140
#define FANS_SYS_DISP_REG_END 0x014F
#define FANS_SYS_DISP_TOTAL_NUM (FANS_SYS_DISP_REG_END - FANS_SYS_DISP_REG_START + 1)

#define FANS_FG_PWM_SET_REG_START 0x0150
#define FANS_FG_PWM_SET_REG_END 0x016F
#define FANS_FG_PWM_SET_REG_NUM (FANS_FG_PWM_SET_REG_END - FANS_FG_PWM_SET_REG_START + 1)

#define FANS_PWM_SET_REG_START FANS_FG_PWM_SET_REG_START - 0x000F
#define FANS_PWM_SET_REG_END FANS_FG_PWM_SET_REG_END
#define FANS_PWM_SET_REG_NUM (FANS_PWM_SET_REG_END - FANS_PWM_SET_REG_START + 1)

#define IS_SIDECAR_WRITABLE_REG(func, addr)                                       \
  ((((func) == WRITE_SINGLE_REGISTER) || ((func) == WRITE_MULTIPLE_REGISTERS)) && \
   (((addr) >= SENS_DEV_CTRL_REG_START && (addr) <= SENS_DEV_CTRL_REG_END) ||     \
    ((addr) >= FANS_PWM_SET_REG_START && (addr) <= FANS_PWM_SET_REG_END) || ((addr) >= FANS_SYS_SET_REG_START && (addr) <= FANS_SYS_SET_REG_END)))

#define IS_SENSCARD_WRITABLE_REG(func, addr)                                      \
  ((((func) == WRITE_SINGLE_REGISTER) || ((func) == WRITE_MULTIPLE_REGISTERS)) && \
   ((addr) >= SENS_DATA_READ_REG_START && (addr) <= SIDECAR_POWER_READ_REG_END))

#define IS_FANCARD_WRITABLE_REG(func, addr)                                       \
  ((((func) == WRITE_SINGLE_REGISTER) || ((func) == WRITE_MULTIPLE_REGISTERS)) && \
   ((addr) >= FANS_SYS_SET_REG_START && (addr) <= FANS_FG_PWM_SET_REG_END))

#define CDU_RS485_ADDR 0x21
#define SENS_RS485_ADDR 0x22
#define FAN_RS485_ADDR 0x23

typedef enum {
  SYSTEM_RESERVED = SYS_BASIC_INFORM_REG_START,
  POWER_ON_SETTING,
  KP,
  KI,
  KD,
} SysInformCase_t;

typedef enum {
  AUTOMATIC_MODE = MAIN_SYS_PARA_SET_REG_START,
  TEMPERATURE_SET_POINT,
  FLOW_SET_POINT,
  DIFFERENTIAL_PRESSURE_SET_POINT,
  MIN_PUMP_SPEED,
  PUMP_STOP_DELAY,
  CDU_DEW_POINT_CALIBRATION,
  CDU_TEMP_COMPENSATION,
  CDU_FLUID_INLET_TEMP_CALIBRATION,
  CDU_FLUID_OUTLET_TEMP_CALIBRATION,
  PT100_ABNORMAL_TEMPERATURE_LOW,
  PT100_ABNORMAL_TEMPERATURE_HIGH,
  NTC_ABNORMAL_TEMPERATURE_LOW,
  NTC_ABNORMAL_TEMPERATURE_HIGH,
  ABNORMAL_PRESSURE_LOW,
  ABNORMAL_PRESSURE_HIGH,
} SysParaSetCase_t;

typedef enum {
  PRESSURE_ALARM_MODE = MAIN_SYS_ALARM_SET_REG_START,
  PRESSURE_ALARM_DELAY,
  OUTLET_FLUID_LOW_PRESSURE_ALARM,
  OUTLET_FLUID_HIGH_PRESSURE_ALARM,
  INLET_FLUID_LOW_PRESSURE_ALARM,
  INLET_FLUID_HIGH_PRESSURE_ALARM,
  SIDECAR_RETURN_FLUID_LOW_PRESSURE_ALARM,
  SIDECAR_RETURN_FLUID_HIGH_PRESSURE_ALARM,
  FLOW_ALARM_MODE,
  LOW_FLOW_ALARM,
  LOW_FLOW_DELAY_PERIOD,
  OVER_FLOW_ALARM,
  OVER_FLOW_DELAY_PERIOD,
  TEMP_ALARM_MODE,
  TEMP_ALARM_DELAY_PERIOD,
  LOW_OUTLET_FLUID_TEMP_ALARM,
  HIGH_OUTLET_FLUID_TEMP_ALARM,
  HIGH_AMBIENT_TEMP_ALARM,
  LEAK_DETECTION_MODE,
  CDU_DETECTING_DELAY_PERIOD,
  SERVER_DETECTING_DELAY_PERIOD,
  SIDECAR_DETECTING_DELAY_PERIOD,
} SysAlarmSetCase_t;

typedef enum {
  SYSTEM_ALARM_STATUS_1 = MAIN_SYS_STAT_DISP_REG_START,
  SYSTEM_ALARM_STATUS_2,
  SYSTEM_ALARM_STATUS_3,
  SYSTEM_ALARM_STATUS_4,
  SYSTEM_UPTIME_HIGH,
  SYSTEM_UPTIME_LOW,
  PUMP1_RUNTIME_HIGH,
  PUMP1_RUNTIME_LOW,
  PUMP2_RUNTIME_HIGH,
  PUMP2_RUNTIME_LOW,
  PERIPHERAL_STATUS_1,
  PERIPHERAL_STATUS_2,
} MainSysStatDispCase_t;

typedef enum {
  PT100_1_TEMPERATURE = MAIN_DATA_READ_REG_START,
  PT100_2_TEMPERATURE,
  PT100_3_TEMPERATURE,
  PT100_4_TEMPERATURE,
  NTC_1_TEMPERATURE,
  NTC_2_TEMPERATURE,
  NTC_3_TEMPERATURE,
  NTC_4_TEMPERATURE,
  PRESSURE_1_VALUE,
  PRESSURE_2_VALUE,
  PRESSURE_3_VALUE,
  PRESSURE_4_VALUE,
  FLOW_VALUE,
  PUMP_1_FEEDBACK,
  PUMP_2_FEEDBACK,
  LEAK_SENSOR,
  AMBIRNT_TEMPERATURE,
  AMBIRNT_HUMIDITY,
  DEW_TEMPERATURE,
  DEVICE_CONNECTED,
} MainDataReadCase_t;

typedef enum {
  PT100_IDEAL_LOW = MAIN_DATA_CALIB_REG_START,
  PT100_IDEAL_HIGH,
  PT100_1_RAW_LOW,
  PT100_2_RAW_LOW,
  PT100_3_RAW_LOW,
  PT100_4_RAW_LOW,
  PT100_1_RAW_HIGH,
  PT100_2_RAW_HIGH,
  PT100_3_RAW_HIGH,
  PT100_4_RAW_HIGH,
  NTC_IDEAL_LOW,
  NTC_IDEAL_HIGH,
  NTC_1_RAW_LOW,
  NTC_2_RAW_LOW,
  NTC_3_RAW_LOW,
  NTC_4_RAW_LOW,
  NTC_1_RAW_HIGH,
  NTC_2_RAW_HIGH,
  NTC_3_RAW_HIGH,
  NTC_4_RAW_HIGH,
  PRESSURE_IDEAL_LOW,
  PRESSURE_IDEAL_HIGH,
  PRESSURE_1_RAW_LOW,
  PRESSURE_2_RAW_LOW,
  PRESSURE_3_RAW_LOW,
  PRESSURE_4_RAW_LOW,
  PRESSURE_1_RAW_HIGH,
  PRESSURE_2_RAW_HIGH,
  PRESSURE_3_RAW_HIGH,
  PRESSURE_4_RAW_HIGH,
} MainDataCalibCase_t;

typedef enum {
  POWER_1_STATUS = CDU_POWER_READ_REG_START,
  POWER_1_VOLTAGE_INPUT,
  POWER_1_CURRENT_INPUT,
  POWER_1_TEMPERATURE,
  POWER_2_STATUS,
  POWER_2_VOLTAGE_INPUT,
  POWER_2_CURRENT_INPUT,
  POWER_2_TEMPERATURE,
} CDUPowerReadCase_t;
typedef enum {
  PUMP_1_RPM = MAIN_DEV_CTRL_REG_START,
  PUMP_2_RPM,
  PROPORTIONAL_VALVE_1_DUTY,
  PROPORTIONAL_VALVE_2_DUTY,
  PT100_CHANNEL_ENABLE_SETTING,
} MainDevCtrlCase_t;

typedef enum {
  SIDECAR_PT100_1_TEMPERATURE = SENS_DATA_READ_REG_START,
  SIDECAR_PT100_2_TEMPERATURE,
  SIDECAR_PT100_3_TEMPERATURE,
  SIDECAR_PT100_4_TEMPERATURE,
  SIDECAR_PRESSURE_1_VALUE,
  SIDECAR_PRESSURE_2_VALUE,
  SIDECAR_LEAK_SENSOR,
  SIDECAR_TEMPERATURE,
  SIDECAR_HUMIDITY,
} SensDataReadCase_t;

typedef enum {
  SIDECAR_PT100_IDEAL_LOW = SENS_DATA_CALIB_REG_START,
  SIDECAR_PT100_IDEAL_HIGH,
  SIDECAR_PT100_1_RAW_LOW,
  SIDECAR_PT100_2_RAW_LOW,
  SIDECAR_PT100_3_RAW_LOW,
  SIDECAR_PT100_4_RAW_LOW,
  SIDECAR_PT100_1_RAW_HIGH,
  SIDECAR_PT100_2_RAW_HIGH,
  SIDECAR_PT100_3_RAW_HIGH,
  SIDECAR_PT100_4_RAW_HIGH,
  SIDECAR_PRESSURE_IDEAL_LOW,
  SIDECAR_PRESSURE_IDEAL_HIGH,
  SIDECAR_PRESSURE_1_RAW_LOW,
  SIDECAR_PRESSURE_2_RAW_LOW,
  SIDECAR_PRESSURE_1_RAW_HIGH,
  SIDECAR_PRESSURE_2_RAW_HIGH,
} SensDataCalibCase_t;

typedef enum {
  SIDECAR_PRESSURE_PUMP = SENS_DEV_CTRL_REG_START,
  SIDECAR_PT100_CHANNEL_ENABLE_SETTING,
} SensDevCtrlCase_t;

typedef enum {
  SIDECAR_POWER_1_STATUS = SIDECAR_POWER_READ_REG_START,
  SIDECAR_POWER_1_VOLTAGE,
  SIDECAR_POWER_1_CURRENT,
  SIDECAR_POWER_1_TEMPERATURE,
  SIDECAR_POWER_2_STATUS,
  SIDECAR_POWER_2_VOLTAGE,
  SIDECAR_POWER_2_CURRENT,
  SIDECAR_POWER_2_TEMPERATURE,
  SIDECAR_POWER_3_STATUS,
  SIDECAR_POWER_3_VOLTAGE,
  SIDECAR_POWER_3_CURRENT,
  SIDECAR_POWER_3_TEMPERATURE,
  SIDECAR_POWER_4_STATUS,
  SIDECAR_POWER_4_VOLTAGE,
  SIDECAR_POWER_4_CURRENT,
  SIDECAR_POWER_4_TEMPERATURE,
} SideCarPowerReadCase_t;

typedef enum {
  FAN_BOARD_AUTO_CONTROL = FANS_SYS_SET_REG_START,
  FAN_ALARM_MODE,
  FAN_ALARM_DELAY,
  FAN_LOW_SPEED_WARNING_THRESHOLD,
  FAN_FG_DIFFERENCE_WARNING_THRESHOLD,
  AUTO_CONTROL_TARGET_SPEED,
  FAN_INSTALLATION_STATUS,
  FAN_SPEED_SAMPLING_INTERVAL_MS,
  WEIGHTED_MOVING_AVERAGE_COUNT,
} FanSysSetCase_t;

typedef enum {
  FAN_FAULT_STATUS = FANS_SYS_DISP_REG_START,
  FAN_STATUS_ON_FAN_BOARD_BITFIELD_0_15,
  FAN_COUNT,
} FanSysDispCase_t;
typedef enum {
  FAN_1_FEEDBACK = FANS_FG_PWM_SET_REG_START,
  FAN_2_FEEDBACK,
  FAN_3_FEEDBACK,
  FAN_4_FEEDBACK,
  FAN_5_FEEDBACK,
  FAN_6_FEEDBACK,
  FAN_7_FEEDBACK,
  FAN_8_FEEDBACK,
  FAN_9_FEEDBACK,
  FAN_10_FEEDBACK,
  FAN_11_FEEDBACK,
  FAN_12_FEEDBACK,
  FAN_13_FEEDBACK,
  FAN_14_FEEDBACK,
  FAN_15_FEEDBACK,
  FAN_16_FEEDBACK,
  FAN_1_DUTY,
  FAN_2_DUTY,
  FAN_3_DUTY,
  FAN_4_DUTY,
  FAN_5_DUTY,
  FAN_6_DUTY,
  FAN_7_DUTY,
  FAN_8_DUTY,
  FAN_9_DUTY,
  FAN_10_DUTY,
  FAN_11_DUTY,
  FAN_12_DUTY,
  FAN_13_DUTY,
  FAN_14_DUTY,
  FAN_15_DUTY,
  FAN_16_DUTY,
} Fans_FG_PWM_SetCase_t;

#endif  // !RS485_REGION_HANDLER_ENUM_H